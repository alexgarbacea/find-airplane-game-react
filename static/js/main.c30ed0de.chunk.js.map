{"version":3,"sources":["Components/GameCell.js","Components/Timer.js","Components/GameBoard.js","App.js","index.js"],"names":["GameCell","props","value","click","onClick","useState","isVisible","classNameValue","setClassNameValue","className","hasPlane","formatTime","sec","minutes","Math","floor","seconds","Timer","timeNow","startTime","counter","setCounter","useEffect","timer","setTimeout","clearTimeout","GameBoard","data","gameState","setGameState","size","setSize","planes","setPlanes","clicks","setClicks","showAdvanced","setShowAdvanced","showHistory","setShowHistory","clickHistory","setClickHistory","time","setTime","gameWidth","setGameWidth","planeCount","setPlaneCount","createBoardData","i","push","j","x","y","createNestedArray","randX","randY","totalPlanes","random","setPlane","gameData","setGameData","cellClick","updateData","today","Date","run","date","getFullYear","getMonth","getDate","getHours","getMinutes","totalClicks","duration","prevClick","endRunHistory","startGame","style","textAlign","type","onChange","e","changeSize","target","changePlanes","width","t","map","row","item","length","sorted","sort","a","b","displayHistory","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAuBeA,EArBE,SAACC,GACd,IAAQC,EAA0BD,EAA1BC,MAAgBC,EAAUF,EAAnBG,QACf,EAA4CC,mBAAS,OAAD,OAAQH,EAAMI,UAAY,GAAK,YAAnF,mBAAOC,EAAP,KAAuBC,EAAvB,KAYA,OACI,qBAAKJ,QAAS,kBALdI,EAAkB,aAClBL,KAImCM,UAAWF,EAA9C,SAVKL,EAAMI,UACPJ,EAAMQ,SAAiB,oBAA3B,EAD6B,QCLxBC,EAAa,SAAAC,GACtB,GAAIA,EAAM,GAAI,CACV,IAAMC,EAAUC,KAAKC,MAAMH,EAAM,IAC3BI,EAAUJ,EAAgB,GAAVC,EACtB,OAAQG,EAAU,EAAX,UAAmBH,EAAnB,YAA8BG,GAA9B,UAA6CH,EAA7C,aAAyDG,GAE/D,OAAIJ,EAAM,GAAKA,EAAM,GACdA,EAAM,EAAP,YAAiBA,GAAjB,aAA+BA,GAG/B,QAuBAK,EAnBD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACrB,EAA8Bd,mBAASc,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,qBAAU,WACN,IAAMC,EAAQC,YAAW,kBAAMH,EAAWD,EAAU,KAAI,KAExD,OADAF,EAAQE,GACD,WACHK,aAAaF,MAGlB,CAACH,IAGA,8BACI,6BAAKT,EAAWS,QC6LbM,EAvNG,WACd,IAiG0BC,EAjG1B,EAAkCtB,mBAAS,UAA3C,mBAAOuB,EAAP,KAAkBC,EAAlB,KACA,EAAwBxB,mBAAS,GAAjC,mBAAOyB,EAAP,KAAaC,EAAb,KACA,EAA4B1B,mBAAS,GAArC,mBAAO2B,EAAP,KAAeC,EAAf,KACA,EAA4B5B,mBAAS,GAArC,mBAAO6B,EAAP,KAAeC,EAAf,KACA,EAAwC9B,oBAAS,GAAjD,mBAAO+B,EAAP,KAAqBC,EAArB,KACA,EAAsChC,oBAAS,GAA/C,mBAAOiC,EAAP,KAAoBC,EAApB,KACA,EAAwClC,mBAAS,IAAjD,mBAAOmC,EAAP,KAAqBC,EAArB,KACA,EAAwBpC,mBAAS,GAAjC,mBAAOqC,EAAP,KAAaC,EAAb,KACA,EAAkCtC,mBAAS,IAA3C,mBAAOuC,EAAP,KAAkBC,EAAlB,KACA,EAAoCxC,mBAAS,GAA7C,mBAAOyC,EAAP,KAAmBC,EAAnB,KAuDMC,EAAkB,WACpB,IAAIrB,EApCkB,SAACG,GAGvB,IAFA,IAAIH,EAAO,GAEFsB,EAAI,EAAGA,EAAInB,EAAMmB,IAAI,CAC1BtB,EAAKuB,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAMqB,IACtBxB,EAAKsB,GAAGE,GAAK,CACTC,EAAIH,EACJI,EAAIF,EACJzC,UAAW,EACXJ,WAAY,GAIxB,OAAOqB,EAsBI2B,CAAkBxB,GAE7B,OADAH,EAnBa,SAACA,GAGd,IAFA,IAAI4B,EAAOC,EAAOC,EAAc,EAEzBA,EAAczB,GACjBuB,EAAQzC,KAAKC,MAAuB,IAAhBD,KAAK4C,SAAmB,GAAK5B,EACjD0B,EAAQ1C,KAAKC,MAAuB,IAAhBD,KAAK4C,SAAmB,GAAK5B,EAE7CH,EAAK4B,GAAOC,GAAO9C,WACnBiB,EAAK4B,GAAOC,GAAO9C,UAAW,EAC9B+C,KAIR,OAAQ9B,EAMDgC,CAAShC,IAKpB,EAAgCtB,mBAAS2C,KAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAGMC,EAAY,SAACV,EAAGC,GAClB,GAAGO,EAASR,GAAGC,GAAG/C,UAAW,OAAO,KAEpC,IAAIyD,EAAaH,EAEjBG,EAAWX,GAAGC,GAAG/C,WAAY,EAE7BuD,EAAYE,GAEZ5B,EAAUD,EAAS,GAEf0B,EAASR,GAAGC,GAAG3C,WACfqC,EAAcD,EAAa,GAExBA,EAAa,GAAKd,IACjBH,EAAa,aA9EH,WAClB,IAAMmC,EAAQ,IAAIC,KACZC,EAAM,CACR,CACIC,KAAI,UAAMH,EAAMI,cAAZ,YAA6BJ,EAAMK,WAAa,EAAhD,YAAqDL,EAAMM,UAA3D,8BACFN,EAAMO,WADJ,YACkBP,EAAMQ,cAC5BC,YAAcvC,EAAO,EACrBwC,SAAU/D,EAAW+B,KAG7BD,GAAgB,SAAAkC,GAAS,4BAAQA,GAAR,CAAmBT,EAAI,QAqExCU,MAqBNC,GAAY,WACFhC,EAAZf,EAAO,GAAkBA,EAAqB,IAC9CiB,EAAc,GACdR,GAAe,GACfI,EAAQ,GACRR,EAAU,GACV0B,EAAYb,KACgBnB,EAAd,cAAdD,EAAyC,SAAyB,mBAyCtE,OACI,sBAAKnB,UAAU,OAAf,UACI,sBAAKA,UAAU,QAAf,UACI,4CACA,6BAAKmB,OAEM,WAAdA,GACG,sBAAKkD,MAAO,CAACC,UAAU,UAAvB,UACI,uEACA,8EACA,qBAAK3E,QAASyE,GAAWpE,UAAU,MAAnC,mBACA,mBAAGA,UAAU,WAAWL,QAAS,kBAAMiC,GAAiBD,IAAxD,SACMA,EAA0C,0BAA3B,2BAEpBA,GACG,gCACI,gCACI,qDACA,uBAAO4C,KAAK,SAAS9E,MAAO4B,EAAMmD,SAAU,SAACC,GAAD,OAtDrD,SAACA,GAGhB,OADAA,EAAI,GAAMA,EAAIpD,GAAQE,GAAUF,EAAKA,GAASG,EAAUiD,EAAEA,GACjD,KAANA,GAAYA,EAAI,EAAUnD,EAAQ,GAClCmD,EAAI,GAAWnD,EAAQ,SAC1BA,EAAQmD,GAiDmEC,CAAWD,EAAEE,OAAOlF,aAE3E,gCACI,6CACA,uBAAO8E,KAAK,SAAS9E,MAAO8B,EAAQiD,SAAU,SAACC,GAAD,OAlDrD,SAACA,GAClB,OAAIA,EAAI,EAAUjD,EAAU,GACzBiD,EAAKpD,EAAKA,EAAcG,EAAUH,EAAKA,QAC1CG,EAAUiD,GA+CmEG,CAAaH,EAAEE,OAAOlF,mBAMhF,mBAAd0B,GACG,sBAAKkD,MAAO,CAAEQ,MAAM,GAAD,OAAK1C,EAAL,OAAsBnC,UAAU,YAAnD,UACI,cAAC,EAAD,CAAOS,QArKJ,SAACqE,GAChB5C,EAAQ4C,IAoKkCpE,UAAWuB,IACzC,yCAAYR,MA7FFP,EA8FQiC,EA7FvBjC,EAAK6D,KAAI,SAAAC,GACZ,OAAOA,EAAID,KAAI,SAAAE,GACX,OACI,gCACI,cAAC,EAAD,CAAUxF,MAAOwF,EAAMtF,QAAS,kBAAM0D,EAAU4B,EAAKtC,EAAGsC,EAAKrC,MAC3DoC,EAAIA,EAAIE,OAAS,KAAOD,EAAQ,qBAAKjF,UAAU,UAAa,KAFxDiF,EAAKtC,EAAIqC,EAAIE,OAASD,EAAKrC,aA6F9B,cAAdzB,GACG,sBAAKkD,MAAO,CAAEC,UAAW,UAAzB,UACI,kDAAyB,uBAD7B,0BAE4B7C,EAF5B,WAE2C,uBACvC,qBAAK9B,QAASyE,GAAWpE,UAAU,MAAnC,sBAGO,mBAAdmB,GACD,mCACI,sBAAKnB,UAAU,UAAf,UACI,qBAAKL,QAAS,kBAAMmC,GAAgBD,IAAc7B,UAAU,MAA5D,qBACC6B,GAnEM,WACnB,IAAMsD,EAASpD,EAAaqD,MAAK,SAACC,EAAGC,GAAQ,OAAOD,EAAErB,YAAcsB,EAAEtB,eACtE,OACI,+BACMmB,EAAOD,OAAS,EAAI,mDAA4BC,EAAOJ,KACrD,SAACrF,EAAO8C,GACJ,OACI,gCACI,uBADJ,SAEW9C,EAAMgE,KAFjB,cAGahE,EAAMsE,YAHnB,gBAIetE,EAAMuE,SACjB,wBALMzB,QA4DF+C,YCtMrBC,MAVf,WAGE,OACE,qBAAKxF,UAAU,MAAf,SACE,cAAC,EAAD,OCFNyF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c30ed0de.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst GameCell = (props) => {\r\n    const { value, onClick: click } = props;\r\n    const [classNameValue, setClassNameValue] = useState(`cell${value.isVisible ? '' : ' hidden'}`);\r\n    \r\n    const getData = () => {\r\n        if (!value.isVisible) return null;\r\n        if (value.hasPlane) return '✈️';\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setClassNameValue('cell')\r\n        click()\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => handleClick()} className={classNameValue}>\r\n            {getData()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameCell\r\n","import {useState, useEffect} from 'react'\r\n\r\nexport const formatTime = sec => {\r\n    if (sec > 59) {\r\n        const minutes = Math.floor(sec / 60);\r\n        const seconds = sec - minutes * 60;\r\n        return (seconds > 9) ? `${minutes}:${seconds}` : `${minutes}:0${seconds}`;\r\n    }\r\n    else if (sec > 0 && sec < 59) {\r\n        return (sec > 9) ? `0:${sec}` : `0:0${sec}`;\r\n    }\r\n    else {\r\n        return '0:00'\r\n    }\r\n}\r\n\r\nconst Timer = ({timeNow, startTime}) => {\r\n    const [counter, setCounter] = useState(startTime);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setCounter(counter + 1), 1000);\r\n        timeNow(counter);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [counter]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>{formatTime(counter)}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import { useState } from 'react'\r\nimport GameCell from './GameCell';\r\nimport Timer, { formatTime } from './Timer';\r\n\r\nconst GameBoard = () => {\r\n    const [gameState, setGameState] = useState('Ready?');\r\n    const [size, setSize] = useState(5);\r\n    const [planes, setPlanes] = useState(1);\r\n    const [clicks, setClicks] = useState(0);\r\n    const [showAdvanced, setShowAdvanced] = useState(false);\r\n    const [showHistory, setShowHistory] = useState(false);\r\n    const [clickHistory, setClickHistory] = useState([])\r\n    const [time, setTime] = useState(0);\r\n    const [gameWidth, setGameWidth] = useState(50);\r\n    const [planeCount, setPlaneCount] = useState(0);\r\n\r\n    const endRunHistory = () => {\r\n        const today = new Date();\r\n        const run = [\r\n            {\r\n                date : `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()} \r\n                ${today.getHours()}:${today.getMinutes()}`,\r\n                totalClicks : clicks+1,\r\n                duration: formatTime(time)\r\n            }\r\n        ]\r\n        setClickHistory(prevClick => [...prevClick, run[0]])\r\n    }\r\n\r\n    const setTimeNow = (t) => {\r\n        setTime(t);\r\n    }\r\n    \r\n    //create the empty nested array\r\n    const createNestedArray = (size) => {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < size; i++){\r\n            data.push([]);\r\n            for (let j = 0; j < size; j++) {\r\n                data[i][j] = {\r\n                    x : i,\r\n                    y : j,\r\n                    hasPlane : false,\r\n                    isVisible : false\r\n                };\r\n            };\r\n        };\r\n        return data;\r\n    }\r\n\r\n    //set plane random\r\n    const setPlane = (data) => {\r\n        let randX, randY, totalPlanes = 0;\r\n\r\n        while (totalPlanes < planes){\r\n            randX = Math.floor((Math.random() * 1000) + 1) % size;\r\n            randY = Math.floor((Math.random() * 1000) + 1) % size;\r\n\r\n            if(!data[randX][randY].hasPlane){\r\n                data[randX][randY].hasPlane = true;\r\n                totalPlanes++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n    //prepare data for display\r\n    const createBoardData = () => {\r\n        let data = createNestedArray(size);\r\n        data = setPlane(data);\r\n        return data;\r\n    }\r\n\r\n    //nested array for game data\r\n    const [gameData, setGameData] = useState(createBoardData());\r\n\r\n    //handle cell click\r\n    const cellClick = (x, y) => {\r\n        if(gameData[x][y].isVisible) return null;\r\n\r\n        let updateData = gameData;\r\n\r\n        updateData[x][y].isVisible = true;\r\n\r\n        setGameData(updateData);\r\n\r\n        setClicks(clicks + 1)\r\n\r\n        if (gameData[x][y].hasPlane) {\r\n            setPlaneCount(planeCount + 1)\r\n            // eslint-disable-next-line eqeqeq\r\n            if(planeCount + 1 == planes){\r\n                setGameState('Found it!')\r\n                endRunHistory();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //display the game board\r\n    const displayBoardData = (data) => {\r\n        return data.map(row => {\r\n            return row.map(item => {\r\n                return(\r\n                    <div key={item.x * row.length + item.y}>\r\n                        <GameCell value={item} onClick={() => cellClick(item.x, item.y)} />\r\n                        {(row[row.length - 1] === item) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>\r\n                );\r\n            })\r\n        })\r\n    }\r\n\r\n    //start or restart the game. reset values\r\n    const startGame = () => {\r\n        size < 10 ? setGameWidth(size) : setGameWidth(10)\r\n        setPlaneCount(0);\r\n        setShowHistory(false)\r\n        setTime(0);\r\n        setClicks(0);\r\n        setGameData(createBoardData());\r\n        gameState === 'Found it!' ? setGameState('Ready?') : setGameState('Find the plane')\r\n        \r\n    }\r\n\r\n    //check size of game board change\r\n    const changeSize = (e) => {\r\n        // eslint-disable-next-line eqeqeq\r\n        e > 4 && (e < size && planes == size*size) && setPlanes(e*e);\r\n        if(e === '' || e < 5) return setSize(5);\r\n        if(e > 10) return setSize(10);\r\n        setSize(e)\r\n    }\r\n\r\n    const changePlanes = (e) => {\r\n        if (e < 1) return setPlanes(1);\r\n        if(e > (size*size)) return setPlanes(size*size);\r\n        setPlanes(e)\r\n    }\r\n\r\n    //display the previous runs\r\n    const displayHistory = () => {\r\n        const sorted = clickHistory.sort((a, b) => { return a.totalClicks - b.totalClicks });\r\n        return (\r\n            <div>\r\n                {!sorted.length > 0 ? <p>No data recorded..</p> : sorted.map(\r\n                    (click, i) => {\r\n                        return (\r\n                            <div key={i}>\r\n                                < hr />\r\n                                Date: {click.date} |\r\n                                Clicks: {click.totalClicks} |\r\n                                Duration: {click.duration}\r\n                                <p></p>\r\n                            </div>\r\n                        )\r\n                    }\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='game'>\r\n            <div className='title'>\r\n                <h1>PLANE GAME</h1>\r\n                <h3>{gameState}</h3>\r\n            </div>\r\n            {gameState === 'Ready?' && //main screen\r\n                <div style={{textAlign:'center'}}>\r\n                    <h3>Find the plane by clicking the cells.</h3>\r\n                    <h3>Try to find it in as few clicks as possible.</h3>\r\n                    <div onClick={startGame} className='btn'>Start</div>\r\n                    <p className='btn-link' onClick={() => setShowAdvanced(!showAdvanced)}>\r\n                        {!showAdvanced ? 'open advanced settings' : 'close advanced settings'}\r\n                    </p>\r\n                    {showAdvanced && \r\n                        <div>\r\n                            <div>\r\n                                <label>Columns X Rows: </label>\r\n                                <input type='number' value={size} onChange={(e) => changeSize(e.target.value)} />\r\n                            </div>\r\n                            <div>\r\n                                <label>Planes: </label>\r\n                                <input type='number' value={planes} onChange={(e) => changePlanes(e.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n            {gameState === 'Find the plane' && //game screen\r\n                <div style={{ width: `${gameWidth}0%` }} className='cell-view' >\r\n                    <Timer timeNow = {setTimeNow} startTime={time}/>\r\n                    <p>Clicks: {clicks}</p>\r\n                    {displayBoardData(gameData)}\r\n                </div>\r\n            }\r\n            {gameState === 'Found it!' && //end screen\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <h2>Congratulations!</h2><hr />\r\n                    You found the plane in {clicks} clicks.<hr />\r\n                    <div onClick={startGame} className='btn'>Retry</div>\r\n                </div>\r\n            }\r\n            {gameState !== 'Find the plane' && //button for history\r\n            <>\r\n                <div className='history'>\r\n                    <div onClick={() => setShowHistory(!showHistory)} className='btn'>History</div>\r\n                    {showHistory && displayHistory()}\r\n                </div>\r\n            </>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard\r\n","import GameBoard from './Components/GameBoard';\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}